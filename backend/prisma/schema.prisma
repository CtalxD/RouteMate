datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  DRIVER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  INITIATED
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  firstName  String
  lastName   String
  profilePic String?
  password   String
  age        Int
  role       Role      @default(USER)
  document   Document? @relation("UserDocument")
  bus        Bus?      @relation("UserBus")
  ratings    BusRating[]
  driverLocation DriverLocation?
  tickets    Ticket[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Bus {
  busId      String   @id @default(uuid())
  busNumber  String   @unique
  userId     Int?     @unique
  user       User?    @relation(fields: [userId], references: [id], name: "UserBus")
  driverName String?
  ratings    BusRating[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("buses")
}

model Document {
  id            Int      @id @default(autoincrement())
  licenseNumber Int
  productionYear Int
  busNumber     String?
  status        DocumentStatus  @default(PENDING)
  user          User     @relation("UserDocument", fields: [userId], references: [id])
  userId        Int      @unique
  adminComment  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Ticket {
  id             String   @id @default(uuid())
  busNumberPlate String   
  from           String  
  to             String
  fromLat        Float?
  fromLon        Float?
  toLat          Float?
  toLon          Float?  
  departureTime  String   
  estimatedTime  String     
  totalPrice     Float 
  passengerNames String[]
  paymentStatus  PaymentStatus  @default(INITIATED)
  user           User    @relation(fields: [userId], references: [id])
  userId         Int
  payments       Payment[]
  expiresAt      DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([busNumberPlate])
  @@index([paymentStatus])
  @@index([createdAt])
}

model Payment {
  id            Int          @id @default(autoincrement())
  amount        Float
  transactionId String       @unique
  status        PaymentStatus @default(INITIATED)
  paymentMethod String?
  ticket        Ticket?      @relation(fields: [ticketId], references: [id])
  ticketId      String?
  metadata      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([transactionId])
  @@index([status])
  @@index([ticketId])
}

model BusRating {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  bus       Bus      @relation(fields: [busId], references: [busId])
  busId     String
  rating    Int     
  comment   String?  
  createdAt DateTime @default(now())

  @@unique([userId, busId])
  @@index([busId])
}

model DriverLocation {
  id          String   @id @default(uuid())
  driver      User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  latitude    Float
  longitude   Float
  accuracy    Float?  
  heading     Float?   
  isOnline    Boolean  @default(false)
  lastUpdated DateTime @updatedAt

  @@index([userId])
  @@index([isOnline])
  @@index([lastUpdated])
}

generator client {
  provider = "prisma-client-js"
}
